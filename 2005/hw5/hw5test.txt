(define x 3)
(define foo (lambda (x) (lambda () x)))
((foo 5))
(define bar (let ((x 10)) (lambda () x)))
(bar)
(define foo2 (let ((x (lambda (x) (let ((x 25)) x)))) x))
(foo2 5)
(+ ((lambda (x) x) 5) (* ((lambda (x) x) 10) (car (list 2 4))))
((lambda (x y) (+ x y)) ((lambda () 3)) (* 4 5))
(define binomial1 (lambda (n k) (if (= n k) 1 (if (= k 0) 1 (+ (binomial1 (- n 1) (- k 1)) (binomial1 (- n 1) k))))))
(binomial1 15 10)
(define factorial (lambda (n) (if (= n 0) 1 (* n (factorial (- n 1))))))
(factorial 10)
(define x (let ((x factorial) (y binomial1) (z (lambda (a b) (+ (a 10) (b 15 10))))) (z x y)))
x
(define biglist (lambda (n acc) (if (= n 0) (cons 0 acc) (biglist (- n 1) (cons n acc)))))
(define y (biglist 30 empty_list))
y
(define sumlist (lambda (l length x acc) (if (= x length) (+ (car l) acc) (sumlist (cdr l) length (+ x 1) (+ (car l) acc)))))
(sumlist y 31 1 0)  